["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:imports",null,"~:requires",["^ ","~$cljs.core","^D","~$goog","^E"],"~:seen",["^?",[]],"~:shadow/js-access-global",["^?",["Error"]],"~:uses",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^2",["^ ","^3","clojure/set.cljs","^4",19,"^5",7,"^6",19,"^7",12,"~:arglists",["~#list",["~$quote",["^M",[[],["~$s1"],["^O","~$s2"],["^O","^P","~$&","~$sets"]]]]],"^8","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",["^M",[[],["^O"],["^O","^P"]]],"^L",["^M",[[],["^O"],["^O","^P"],["^O","^P","~$&","^Q"]]],"~:arglists-meta",["^M",[null,null,null,null]]]],"^@","~$clojure.set/union","^3","clojure/set.cljs","^7",12,"^R",["^ ","^S",true,"^T",2,"^U",2,"^V",["^M",[[],["^O"],["^O","^P"]]],"^L",["^M",[[],["^O"],["^O","^P"],["^O","^P","~$&","^Q"]]],"^W",["^M",[null,null,null,null]]],"^V",["^M",[[],["^O"],["^O","^P"]]],"~:protocol-impl",null,"^T",2,"^W",["^M",[null,null,null,null]],"^5",1,"^S",true,"~:methods",[["^ ","^T",0,"^S",false,"~:tag","~$cljs.core/ISet"],["^ ","^T",1,"^S",false],["^ ","^T",2,"^S",false,"^[",["^?",[null,"~$any"]]],["^ ","^T",2,"^S",true,"^[",["^?",[null,"^11"]]]],"^4",19,"^6",19,"^U",2,"~:fn-var",true,"^L",["^M",[[],["^O"],["^O","^P"],["^O","^P","~$&","^Q"]]],"^8","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",97,"^5",7,"^6",97,"^7",17,"^L",["^M",["^N",["^M",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"^@","~$clojure.set/map-invert","^3","clojure/set.cljs","^7",17,"^V",["^M",[["~$m"]]],"^Y",null,"^W",["^M",[null,null]],"^5",1,"^S",false,"^4",97,"~:ret-tag",["^?",[null,"^11"]],"^6",97,"^U",1,"^12",true,"^L",["^M",["^N",["^M",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",101,"^5",7,"^6",101,"^7",11,"^L",["^M",["^N",["^M",[["~$xrel","~$yrel"],["^17","^18","~$km"]]]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^R",["^ ","^S",false,"^T",3,"^U",3,"^V",["^M",[["^17","^18"],["^17","^18","^19"]]],"^L",["^M",[["^17","^18"],["^17","^18","^19"]]],"^W",["^M",[null,null]]]],"^@","~$clojure.set/join","^3","clojure/set.cljs","^7",11,"^R",["^ ","^S",false,"^T",3,"^U",3,"^V",["^M",[["^17","^18"],["^17","^18","^19"]]],"^L",["^M",[["^17","^18"],["^17","^18","^19"]]],"^W",["^M",[null,null]]],"^V",["^M",[["^17","^18"],["^17","^18","^19"]]],"^Y",null,"^T",3,"^W",["^M",[null,null]],"^5",1,"^S",false,"^Z",[["^ ","^T",2,"^S",false,"^[",["^?",[null,"^11","^10"]]],["^ ","^T",3,"^S",false,"^[",["^?",[null,"^11"]]]],"^4",101,"^6",101,"^U",3,"^12",true,"^L",["^M",[["^17","^18"],["^17","^18","^19"]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",61,"^5",7,"^6",61,"^7",13,"^L",["^M",["^N",["^M",[["~$pred","~$xset"]]]]],"^8","Returns a set of the elements for which pred is true"],"^@","~$clojure.set/select","^3","clojure/set.cljs","^7",13,"^V",["^M",[["^1<","^1="]]],"^Y",null,"^W",["^M",[null,null]],"^5",1,"^S",false,"^4",61,"^15",["^?",[null,"^11"]],"^6",61,"^U",2,"^12",true,"^L",["^M",["^N",["^M",[["^1<","^1="]]]]],"^8","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",31,"^5",7,"^6",31,"^7",19,"^L",["^M",["^N",["^M",[["^O"],["^O","^P"],["^O","^P","~$&","^Q"]]]]],"^8","Return a set that is the intersection of the input sets","^R",["^ ","^S",true,"^T",2,"^U",2,"^V",["^M",[["^O"],["^O","^P"]]],"^L",["^M",[["^O"],["^O","^P"],["^O","^P","~$&","^Q"]]],"^W",["^M",[null,null,null]]]],"^@","~$clojure.set/intersection","^3","clojure/set.cljs","^7",19,"^R",["^ ","^S",true,"^T",2,"^U",2,"^V",["^M",[["^O"],["^O","^P"]]],"^L",["^M",[["^O"],["^O","^P"],["^O","^P","~$&","^Q"]]],"^W",["^M",[null,null,null]]],"^V",["^M",[["^O"],["^O","^P"]]],"^Y",null,"^T",2,"^W",["^M",[null,null,null]],"^5",1,"^S",true,"^Z",[["^ ","^T",1,"^S",false],["^ ","^T",2,"^S",false,"^[",["^?",[null,"^11"]]],["^ ","^T",2,"^S",true,"^[",["^?",[null,"^11"]]]],"^4",31,"^6",31,"^U",2,"^12",true,"^L",["^M",[["^O"],["^O","^P"],["^O","^P","~$&","^Q"]]],"^8","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",137,"^5",7,"^6",137,"^7",16,"^L",["^M",["^N",["^M",[["~$set1","~$set2"]]]]],"^8","Is set1 a superset of set2?"],"^@","~$clojure.set/superset?","^3","clojure/set.cljs","^7",16,"^V",["^M",[["^1B","^1C"]]],"^Y",null,"^W",["^M",[null,null]],"^5",1,"^S",false,"^4",137,"^15","~$boolean","^6",137,"^U",2,"^12",true,"^L",["^M",["^N",["^M",[["^1B","^1C"]]]]],"^8","Is set1 a superset of set2?"],"~$index",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",87,"^5",7,"^6",87,"^7",12,"^L",["^M",["^N",["^M",[["^17","~$ks"]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^@","~$clojure.set/index","^3","clojure/set.cljs","^7",12,"^V",["^M",[["^17","^1G"]]],"^Y",null,"^W",["^M",[null,null]],"^5",1,"^S",false,"^4",87,"^15",["^?",[null,"^11"]],"^6",87,"^U",2,"^12",true,"^L",["^M",["^N",["^M",[["^17","^1G"]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",13,"^5",8,"^6",13,"^7",22,"~:private",true,"^L",["^M",["^N",["^M",[["~$k","~$coll"]]]]]],"^1J",true,"^@","~$clojure.set/bubble-max-key","^3","clojure/set.cljs","^7",22,"^V",["^M",[["~$k","^1K"]]],"^Y",null,"^W",["^M",[null,null]],"^5",1,"^S",false,"^4",13,"^15","~$clj","^6",13,"^U",2,"^12",true,"^L",["^M",["^N",["^M",[["~$k","^1K"]]]]]],"~$subset?",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",131,"^5",7,"^6",131,"^7",14,"^L",["^M",["^N",["^M",[["^1B","^1C"]]]]],"^8","Is set1 a subset of set2?"],"^@","~$clojure.set/subset?","^3","clojure/set.cljs","^7",14,"^V",["^M",[["^1B","^1C"]]],"^Y",null,"^W",["^M",[null,null]],"^5",1,"^S",false,"^4",131,"^15","^1E","^6",131,"^U",2,"^12",true,"^L",["^M",["^N",["^M",[["^1B","^1C"]]]]],"^8","Is set1 a subset of set2?"],"~$rename",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",82,"^5",7,"^6",82,"^7",13,"^L",["^M",["^N",["^M",[["^17","~$kmap"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^@","~$clojure.set/rename","^3","clojure/set.cljs","^7",13,"^V",["^M",[["^17","^1Q"]]],"^Y",null,"^W",["^M",[null,null]],"^5",1,"^S",false,"^4",82,"^15",["^?",["^1M","^11","^10","~$cljs.core/MetaFn","~$clj-nil"]],"^6",82,"^U",2,"^12",true,"^L",["^M",["^N",["^M",[["^17","^1Q"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",72,"^5",7,"^6",72,"^7",18,"^L",["^M",["^N",["^M",[["~$map","^1Q"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"^@","~$clojure.set/rename-keys","^3","clojure/set.cljs","^7",18,"^V",["^M",[["^1V","^1Q"]]],"^Y",null,"^W",["^M",[null,null]],"^5",1,"^S",false,"^4",72,"^15",["^?",[null,"^11"]],"^6",72,"^U",2,"^12",true,"^L",["^M",["^N",["^M",[["^1V","^1Q"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",67,"^5",7,"^6",67,"^7",14,"^L",["^M",["^N",["^M",[["^17","^1G"]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"^@","~$clojure.set/project","^3","clojure/set.cljs","^7",14,"^V",["^M",[["^17","^1G"]]],"^Y",null,"^W",["^M",[null,null]],"^5",1,"^S",false,"^4",67,"^15",["^?",["^1M","^11","^10","^1S","^1T"]],"^6",67,"^U",2,"^12",true,"^L",["^M",["^N",["^M",[["^17","^1G"]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^K",null,"^2",["^ ","^3","clojure/set.cljs","^4",46,"^5",7,"^6",46,"^7",17,"^L",["^M",["^N",["^M",[["^O"],["^O","^P"],["^O","^P","~$&","^Q"]]]]],"^8","Return a set that is the first set without elements of the remaining sets","^R",["^ ","^S",true,"^T",2,"^U",2,"^V",["^M",[["^O"],["^O","^P"]]],"^L",["^M",[["^O"],["^O","^P"],["^O","^P","~$&","^Q"]]],"^W",["^M",[null,null,null]]]],"^@","~$clojure.set/difference","^3","clojure/set.cljs","^7",17,"^R",["^ ","^S",true,"^T",2,"^U",2,"^V",["^M",[["^O"],["^O","^P"]]],"^L",["^M",[["^O"],["^O","^P"],["^O","^P","~$&","^Q"]]],"^W",["^M",[null,null,null]]],"^V",["^M",[["^O"],["^O","^P"]]],"^Y",null,"^T",2,"^W",["^M",[null,null,null]],"^5",1,"^S",true,"^Z",[["^ ","^T",1,"^S",false],["^ ","^T",2,"^S",false,"^[",["^?",[null,"^11"]]],["^ ","^T",2,"^S",true,"^[",["^?",[null,"^11"]]]],"^4",46,"^6",46,"^U",2,"^12",true,"^L",["^M",[["^O"],["^O","^P"],["^O","^P","~$&","^Q"]]],"^8","Return a set that is the first set without elements of the remaining sets"]],"~:require-macros",["^ ","^D","^D"],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^E","^D"]]